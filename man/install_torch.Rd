% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/00_install_conda_coorsim.R
\name{install_torch}
\alias{install_torch}
\title{Install PyTorch in a Conda Environment}
\usage{
install_torch(python_path = NULL, conda_env = NULL, verbose = TRUE)
}
\arguments{
\item{python_path}{Character. The path to the Python executable in the Conda environment.
If `NULL`, the function automatically detects the Python executable for the active Conda environment.}

\item{conda_env}{Character. The name of the Conda environment where PyTorch should be installed.
If `NULL`, the function attempts to detect the currently active Conda environment.}

\item{verbose}{Logical. If `TRUE`, the function prints progress messages.}
}
\value{
Invisibly returns `NULL`. The function is called for its side effects of installing
and verifying PyTorch.
}
\description{
Installs PyTorch and related libraries (`torch`, `torchvision`, and `torchaudio`)
in a specified Conda environment. The function automatically detects CUDA availability
and installs the appropriate GPU or CPU version of PyTorch.
}
\details{
The function:
\itemize{
  \item Detects the active Conda environment if `conda_env` is not specified.
  \item Checks for GPU and CUDA availability.
  \item Selects the correct PyTorch installation URL based on CUDA version or CPU fallback.
  \item Installs PyTorch via `reticulate::py_install()`.
  \item Verifies installation by checking the versions of PyTorch and CUDA.
}

If CUDA is available, the function installs the corresponding GPU-accelerated PyTorch build.
Otherwise, it falls back to a CPU-only installation.
}
