% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/04_merging_filtering_functions.R
\name{filter_groups_data}
\alias{filter_groups_data}
\title{Filter a detected group structure based on various criteria}
\usage{
filter_groups_data(
  groups_data,
  by_col = NULL,
  by_val = NULL,
  edge_weight = NULL,
  time_window = NULL,
  min_simil = NULL,
  min_comm_size = NULL,
  min_comp_size = NULL,
  min_degree = NULL,
  min_participation = NULL,
  communities_index = NULL,
  quantile_accountwise = NULL,
  quantile_postwise = NULL,
  top_n_accountwise = NULL,
  top_n_postwise = NULL,
  stringsimil_cutoff = NULL,
  stringsimil_method = "cosine",
  stringsimil_ngram = 3,
  nthread = 10,
  rerun_detect_groups = FALSE,
  verbose = TRUE,
  ...
)
}
\arguments{
\item{groups_data}{A list returned by `coorsim_detect_groups()` or `augment_groups_data()`.}

\item{by_col}{Column name in `post_data` to filter by (e.g. `"lang"`, `"country"`).}

\item{by_val}{Value(s) to keep in `by_col`.}

\item{edge_weight}{Minimum edge weight to retain in the similarity network.}

\item{time_window}{Maximum time difference allowed between posts (in seconds).}

\item{min_simil}{Minimum cosine similarity allowed between post embeddings.}

\item{min_comm_size}{Minimum number of accounts in a community.}

\item{min_comp_size}{Minimum number of nodes in a graph component.}

\item{min_degree}{Minimum node degree.}

\item{min_participation}{Minimum number of post-level similarity relations per account.}

\item{communities_index}{Vector of community indices to keep.}

\item{quantile_accountwise}{Drop communities below a given quantile of account size.}

\item{quantile_postwise}{Drop communities below a given quantile of post size.}

\item{top_n_accountwise}{Keep the top-n largest communities by account count.}

\item{top_n_postwise}{Keep the top-n largest communities by post count.}

\item{stringsimil_cutoff}{Optional. Additional filter: minimum geometric mean of cosine similarity and string similarity.}

\item{stringsimil_method}{String similarity method passed to `stringdist::stringsim()` (e.g. `"cosine"`, `"jaccard"`).}

\item{stringsimil_ngram}{Integer n-gram size used in string similarity.}

\item{nthread}{Number of threads used in `stringsim` filtering.}

\item{rerun_detect_groups}{Logical. Whether to re-run group detection after filtering similarity pairs.}

\item{verbose}{Logical. Whether to print informative messages.}

\item{...}{Additional arguments passed to `coorsim_detect_groups()` if rerun is triggered.}
}
\value{
A filtered `groups_data` list with updated `$filter` slot for reproducibility.
}
\description{
This function filters a detected group structure (`groups_data`) by a wide range of optional thresholds
and selection criteria, including account-level, post-level, and similarity-based filters. It supports
optional re-detection of groups after filtering similarity pairs (`sim_dt`), and returns a cleaned, 
consistent `groups_data` object.
}
\seealso{
[coorsim_detect_groups()], [augment_groups_data()]
}
