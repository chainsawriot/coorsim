% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/04_merging_filtering_functions.R
\name{augment_groups_data}
\alias{augment_groups_data}
\title{Augment Group Data with Post and User Information}
\usage{
augment_groups_data(
  groups_data,
  post_data,
  user_data,
  post_id = NULL,
  account_id = NULL,
  other_post_vars = NULL,
  other_user_vars = NULL,
  sim_dt_community = TRUE,
  verbose = FALSE
)
}
\arguments{
\item{groups_data}{A list with at least one element `node_list` (a `data.table` containing node information).
Optionally, it may also contain `post_data` and `sim_dt`, which will be augmented.}

\item{post_data}{A `data.table` containing additional post data to be merged.}

\item{user_data}{A `data.table` containing user data to be merged.}

\item{post_id}{Optional. Column name in `post_data` to be renamed to `'post_id'` for joining.}

\item{account_id}{Optional. Column name in `user_data` and `groups_data` to be renamed to `'account_id'` for joining.}

\item{other_post_vars}{Optional. Additional columns to retain from `post_data`.}

\item{other_user_vars}{Optional. Additional columns to retain from `user_data`.}

\item{sim_dt_community}{Logical. If `TRUE`, community identifiers from `node_list` will be joined onto `sim_dt`,
matching on `account_id` and `account_id_y`. The resulting `sim_dt` will be reordered
to follow the structure: x-side → similarity → y-side → parameters.}

\item{verbose}{Logical. If `TRUE`, provides detailed output about each processing step.}
}
\value{
A list, `groups_data`, with the following possible modifications:
\itemize{
  \item \code{post_data}: augmented with user information and additional post columns, if present.
  \item \code{node_list}: augmented with user data and optionally sampled content from post data.
  \item \code{sim_dt}: (if \code{sim_dt_community = TRUE}) augmented with \code{community} and \code{community_y}
        for \code{account_id} and \code{account_id_y}, and columns reordered accordingly.
}
}
\description{
This function merges additional post and user data into a grouped data structure, `groups_data`.
It supports renaming columns for consistency, de-duplication, and optional community annotation in the similarity table.
}
\details{
This function standardizes column names, selects relevant fields, and performs efficient `data.table` joins.
User-level data is prefixed with \code{"account_"} before merging. If \code{sim_dt_community = TRUE}, community IDs
are merged into `sim_dt` and the column order is standardized to place the x-side account and post information first,
followed by similarity metrics, y-side information, and parameter columns.
}
